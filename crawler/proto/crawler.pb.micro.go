// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: crawler.proto

package crawlerproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Crawler service

type CrawlerService interface {
	RecieveURL(ctx context.Context, in *SubmitURLRequest, opts ...client.CallOption) (*SubmitURLResponse, error)
	FinishedRunning(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*StatusMessage, error)
	Chunker(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (Crawler_ChunkerService, error)
}

type crawlerService struct {
	c    client.Client
	name string
}

func NewCrawlerService(name string, c client.Client) CrawlerService {
	return &crawlerService{
		c:    c,
		name: name,
	}
}

func (c *crawlerService) RecieveURL(ctx context.Context, in *SubmitURLRequest, opts ...client.CallOption) (*SubmitURLResponse, error) {
	req := c.c.NewRequest(c.name, "Crawler.RecieveURL", in)
	out := new(SubmitURLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerService) FinishedRunning(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*StatusMessage, error) {
	req := c.c.NewRequest(c.name, "Crawler.FinishedRunning", in)
	out := new(StatusMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerService) Chunker(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (Crawler_ChunkerService, error) {
	req := c.c.NewRequest(c.name, "Crawler.Chunker", &empty.Empty{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &crawlerServiceChunker{stream}, nil
}

type Crawler_ChunkerService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Chunk, error)
}

type crawlerServiceChunker struct {
	stream client.Stream
}

func (x *crawlerServiceChunker) Close() error {
	return x.stream.Close()
}

func (x *crawlerServiceChunker) Context() context.Context {
	return x.stream.Context()
}

func (x *crawlerServiceChunker) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *crawlerServiceChunker) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *crawlerServiceChunker) Recv() (*Chunk, error) {
	m := new(Chunk)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Crawler service

type CrawlerHandler interface {
	RecieveURL(context.Context, *SubmitURLRequest, *SubmitURLResponse) error
	FinishedRunning(context.Context, *empty.Empty, *StatusMessage) error
	Chunker(context.Context, *empty.Empty, Crawler_ChunkerStream) error
}

func RegisterCrawlerHandler(s server.Server, hdlr CrawlerHandler, opts ...server.HandlerOption) error {
	type crawler interface {
		RecieveURL(ctx context.Context, in *SubmitURLRequest, out *SubmitURLResponse) error
		FinishedRunning(ctx context.Context, in *empty.Empty, out *StatusMessage) error
		Chunker(ctx context.Context, stream server.Stream) error
	}
	type Crawler struct {
		crawler
	}
	h := &crawlerHandler{hdlr}
	return s.Handle(s.NewHandler(&Crawler{h}, opts...))
}

type crawlerHandler struct {
	CrawlerHandler
}

func (h *crawlerHandler) RecieveURL(ctx context.Context, in *SubmitURLRequest, out *SubmitURLResponse) error {
	return h.CrawlerHandler.RecieveURL(ctx, in, out)
}

func (h *crawlerHandler) FinishedRunning(ctx context.Context, in *empty.Empty, out *StatusMessage) error {
	return h.CrawlerHandler.FinishedRunning(ctx, in, out)
}

func (h *crawlerHandler) Chunker(ctx context.Context, stream server.Stream) error {
	m := new(empty.Empty)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.CrawlerHandler.Chunker(ctx, m, &crawlerChunkerStream{stream})
}

type Crawler_ChunkerStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Chunk) error
}

type crawlerChunkerStream struct {
	stream server.Stream
}

func (x *crawlerChunkerStream) Close() error {
	return x.stream.Close()
}

func (x *crawlerChunkerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *crawlerChunkerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *crawlerChunkerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *crawlerChunkerStream) Send(m *Chunk) error {
	return x.stream.Send(m)
}

// Client API for Chunker service

type ChunkerService interface {
	Chunker(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (Chunker_ChunkerService, error)
}

type chunkerService struct {
	c    client.Client
	name string
}

func NewChunkerService(name string, c client.Client) ChunkerService {
	return &chunkerService{
		c:    c,
		name: name,
	}
}

func (c *chunkerService) Chunker(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (Chunker_ChunkerService, error) {
	req := c.c.NewRequest(c.name, "Chunker.Chunker", &empty.Empty{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &chunkerServiceChunker{stream}, nil
}

type Chunker_ChunkerService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Chunk, error)
}

type chunkerServiceChunker struct {
	stream client.Stream
}

func (x *chunkerServiceChunker) Close() error {
	return x.stream.Close()
}

func (x *chunkerServiceChunker) Context() context.Context {
	return x.stream.Context()
}

func (x *chunkerServiceChunker) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chunkerServiceChunker) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chunkerServiceChunker) Recv() (*Chunk, error) {
	m := new(Chunk)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Chunker service

type ChunkerHandler interface {
	Chunker(context.Context, *empty.Empty, Chunker_ChunkerStream) error
}

func RegisterChunkerHandler(s server.Server, hdlr ChunkerHandler, opts ...server.HandlerOption) error {
	type chunker interface {
		Chunker(ctx context.Context, stream server.Stream) error
	}
	type Chunker struct {
		chunker
	}
	h := &chunkerHandler{hdlr}
	return s.Handle(s.NewHandler(&Chunker{h}, opts...))
}

type chunkerHandler struct {
	ChunkerHandler
}

func (h *chunkerHandler) Chunker(ctx context.Context, stream server.Stream) error {
	m := new(empty.Empty)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ChunkerHandler.Chunker(ctx, m, &chunkerChunkerStream{stream})
}

type Chunker_ChunkerStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Chunk) error
}

type chunkerChunkerStream struct {
	stream server.Stream
}

func (x *chunkerChunkerStream) Close() error {
	return x.stream.Close()
}

func (x *chunkerChunkerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *chunkerChunkerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chunkerChunkerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chunkerChunkerStream) Send(m *Chunk) error {
	return x.stream.Send(m)
}
