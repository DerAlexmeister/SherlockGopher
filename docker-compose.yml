version: "3"
services:
    zookeeper:
        image: wurstmeister/zookeeper
        ports: 
            - "2181:2181"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:2181"]
            interval: 30s
            timeout: 10s
            retries: 5
    kafka:
        image: wurstmeister/kafka
        ports:
            - "9092:9092"
        environment: 
            KAFKA_ADVERTISED_HOST_NAME: 10.0.2.15
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9092"]
            interval: 30s
            timeout: 10s
            retries: 5
    mongodb_container:
        image: mongo:latest
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: rootpassword
        ports:
            - "27017:27017"
        volumes:
            - mongodb_data_container:/data/db
    postgres:
        image: postgres:latest
        volumes:
            - db-data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
    neo4j:
        image: neo4j:3.5
        restart: unless-stopped
        ports:
            - 7474:7474
            - 7687:7687
        volumes:
            - ./conf:/conf
            - ./data:/data
            - ./import:/import
            - ./logs:/logs
            - ./plugins:/plugins
        environment:
            - NEO4J_AUTH=neo4j/test
    frontend: 
        build: 
            context: .
            dockerfile: frontend/dockerfile
        container_name: frontend  
        ports:
            - "8080:8080"
    webserver: 
        build: 
            context: .
            dockerfile: webserver/dockerfile
        container_name: webserver  
        ports:
            - "8081:8081"
    screenshot: 
        build: 
            context: .
            dockerfile: screenshot/dockerfile
        container_name: screenshot  
        ports:
            - "8202:8202"
        restart: on-failure
        depends_on:
            - zookeeper
            - kafka
    redis:
        image: redis:latest
        container_name: redis
        ports:
            - "6379:6379"
    analysepictures: 
        build: 
            context: .
            dockerfile: analysePictures/dockerfile
        container_name: analysepictures  
        ports:
            - "8203:8203"
    celery:
        image: eeacms/celery:latest
        container_name: celery
        command: celery -A server worker -l info
        links:
            - redis
    crawler: 
        build: 
            context: .
            dockerfile: sherlockcrawler/dockerfile
        container_name: crawler  
        ports:
            - "8200:8200"
        restart: on-failure
        depends_on:
            - zookeeper
            - kafka
    analyser: 
        build: 
            context: .
            dockerfile: analyser/dockerfile
        container_name: analyser  
        ports:
            - "8201:8201"
        restart: on-failure
        depends_on:
            - zookeeper
            - kafka
volumes:
    mongodb_data_container:
    db-data:
        driver: local