// Code generated by MockGen. DO NOT EDIT.
// Source: /home/markus/go/pkg/mod/github.com/micro/go-micro@v1.18.0/web/web.go

// Package mock_web is a generated GoMock package.
package mock_web

import (
	gomock "github.com/golang/mock/gomock"
	web "github.com/micro/go-micro/web"
	http "net/http"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockService) Client() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockServiceMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockService)(nil).Client))
}

// Init mocks base method
func (m *MockService) Init(opts ...web.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockServiceMockRecorder) Init(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockService)(nil).Init), opts...)
}

// Options mocks base method
func (m *MockService) Options() web.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(web.Options)
	return ret0
}

// Options indicates an expected call of Options
func (mr *MockServiceMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockService)(nil).Options))
}

// Handle mocks base method
func (m *MockService) Handle(pattern string, handler http.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", pattern, handler)
}

// Handle indicates an expected call of Handle
func (mr *MockServiceMockRecorder) Handle(pattern, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockService)(nil).Handle), pattern, handler)
}

// HandleFunc mocks base method
func (m *MockService) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleFunc", pattern, handler)
}

// HandleFunc indicates an expected call of HandleFunc
func (mr *MockServiceMockRecorder) HandleFunc(pattern, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFunc", reflect.TypeOf((*MockService)(nil).HandleFunc), pattern, handler)
}

// Run mocks base method
func (m *MockService) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockServiceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockService)(nil).Run))
}
