// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: filestreamproto.proto

package analyserfilestream

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Receiver service

type ReceiverService interface {
	Upload(ctx context.Context, opts ...client.CallOption) (Receiver_UploadService, error)
}

type receiverService struct {
	c    client.Client
	name string
}

func NewReceiverService(name string, c client.Client) ReceiverService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "analyserfilestream"
	}
	return &receiverService{
		c:    c,
		name: name,
	}
}

func (c *receiverService) Upload(ctx context.Context, opts ...client.CallOption) (Receiver_UploadService, error) {
	req := c.c.NewRequest(c.name, "Receiver.Upload", &Chunk{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &receiverServiceUpload{stream}, nil
}

type Receiver_UploadService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Chunk) error
}

type receiverServiceUpload struct {
	stream client.Stream
}

func (x *receiverServiceUpload) Close() error {
	return x.stream.Close()
}

func (x *receiverServiceUpload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *receiverServiceUpload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *receiverServiceUpload) Send(m *Chunk) error {
	return x.stream.Send(m)
}

// Server API for Receiver service

type ReceiverHandler interface {
	Upload(context.Context, Receiver_UploadStream) error
}

func RegisterReceiverHandler(s server.Server, hdlr ReceiverHandler, opts ...server.HandlerOption) error {
	type receiver interface {
		Upload(ctx context.Context, stream server.Stream) error
	}
	type Receiver struct {
		receiver
	}
	h := &receiverHandler{hdlr}
	return s.Handle(s.NewHandler(&Receiver{h}, opts...))
}

type receiverHandler struct {
	ReceiverHandler
}

func (h *receiverHandler) Upload(ctx context.Context, stream server.Stream) error {
	return h.ReceiverHandler.Upload(ctx, &receiverUploadStream{stream})
}

type Receiver_UploadStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Chunk, error)
}

type receiverUploadStream struct {
	stream server.Stream
}

func (x *receiverUploadStream) Close() error {
	return x.stream.Close()
}

func (x *receiverUploadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *receiverUploadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *receiverUploadStream) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
