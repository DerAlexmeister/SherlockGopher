syntax = "proto3";

package analysertowebserver;

service Analyser {
    /*
     WorkloadRPC can be called to get the workload of the analyser
     */
    rpc WorkloadRPC(WorkloadRequest) returns (WorkloadResponse) {}

    /*
     ChangeStateRPC can be called to set the state of the analyser
     */
    rpc ChangeStateRPC(ChangeStateRequest) returns (ChangeStateResponse) {}

    /*
     StateRPC can be called to get the state of the analyser
     */
    rpc StateRPC(StateRequest) returns (StateResponse) {}
}

/*
WorkloadRequest requests the status of the queue
 */
message WorkloadRequest {}

/*
WorkloadResponse returns for each task state the amount of tasks in it
 */
message WorkloadResponse {
    string crawledWebsite = 1;
    uint64 undone = 2;
    uint64 processing = 3;
    uint64 crawlerError = 4;
    uint64 saving = 5;
    uint64 sendToCrawler = 6;
    uint64 finished = 7;
}

/*
ChangeStateRequest requests the analyser to change his state.
*/
message ChangeStateRequest {
    AnalyserStateEnum state = 1;
}

/*
ChangeStateResponse returns true if the status was successfully set.
*/
message ChangeStateResponse {
    bool success = 1;
}

/*
StateRequest requests the current state of the analyser.
*/
message StateRequest {}

/*
StateResponse returns the current state of the analyser.
*/
message StateResponse {
    AnalyserStateEnum state = 1;
}

/*
AnalyserStateEnum represents the possible states of the analyser
*/
enum AnalyserStateEnum {
        Stop = 0;
        Pause = 1;
        Running = 2;
        Clean = 3;
        Idle = 4;
}