syntax = "proto3";

package analysertowebserver;

service Analyser {
    /*
     WorkloadRPC can be called to get the workload of the analyser
     */
    rpc WorkloadRPC(WorkloadRequest) returns (WorkloadResponse) {}

    /*
     ChangeStateRPC can be called to set the state of the analyser
     */
    rpc ChangeStateRPC(ChangeStateRequest) returns (ChangeStateResponse) {}

    /*
     StateRPC can be called to get the state of the analyser
     */
    rpc StateRPC(StateRequest) returns (StateResponse) {}

    // Stream http response to analyser
    //rpc Upload(stream Chunk) returns (stream UploadStatus) {}

    rpc WebsiteData(stream CrawlerPackage) returns (stream CrawlerAck) {}
}

message CrawlerAck {
    uint64 id = 1;
}

message CrawlerPackage {
    uint64 id = 1;
    bytes content = 2;
}



/*
WorkloadRequest requests the status of the queue
 */
message WorkloadRequest {}

/*
WorkloadResponse returns for each task state the amount of tasks in it
 */
message WorkloadResponse {
    string crawledWebsite = 1;
    uint64 undone = 2;
    uint64 processing = 3;
    uint64 crawlerError = 4;
    uint64 saving = 5;
    uint64 sendToCrawler = 6;
    uint64 finished = 7;
}

/*
ChangeStateRequest requests the analyser to change his state.
*/
message ChangeStateRequest {
    AnalyserStateEnum state = 1;
}

/*
ChangeStateResponse returns true if the status was successfully set.
*/
message ChangeStateResponse {
    bool success = 1;
}

/*
StateRequest requests the current state of the analyser.
*/
message StateRequest {}

/*
StateResponse returns the current state of the analyser.
*/
message StateResponse {
    AnalyserStateEnum state = 1;
}

/*
AnalyserStateEnum represents the possible states of the analyser
*/
enum AnalyserStateEnum {
        Stop = 0;
        Pause = 1;
        Running = 2;
        Clean = 3;
        Idle = 4;
}

// Streamer Stuff

/*
Chunk represents a chunk of a http response.
*/
message Chunk {
        bytes Content = 1;
        uint64 TaskId = 2;
        string Address = 3;
        string TaskError = 4;
        repeated HeaderArray Header = 5;
        int32 StatusCode = 6;
        int64 ResponseTime = 7;
        uint64 NumberOfPackets = 8;
}

/*
HeaderArray consists of keys and values
*/
message HeaderArray {
        string Key = 1;
        repeated HeaderArrayValue ValueArr = 2;
}

/*
HeaderArray consists of keys and values
*/
message HeaderArrayValue {
        string Value = 1;
}

/*
UploadStatusCode gives information. the receiver sends a ok if he received all chunks.
*/
enum UploadStatusCode {
        Ok = 0;
        Failed = 1;
}

/*
UploadStatus is the response from the receiver.
*/
message UploadStatus {
        UploadStatusCode Code = 2;
}



