// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: analyser.proto

package messaging

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"

	context "context"

	client "github.com/micro/go-micro/client"

	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Analyser service

type AnalyserService interface {
	Upload(ctx context.Context, opts ...client.CallOption) (Analyser_UploadService, error)
}

type analyserService struct {
	c    client.Client
	name string
}

func NewAnalyserService(name string, c client.Client) AnalyserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "messaging"
	}
	return &analyserService{
		c:    c,
		name: name,
	}
}

func (c *analyserService) Upload(ctx context.Context, opts ...client.CallOption) (Analyser_UploadService, error) {
	req := c.c.NewRequest(c.name, "Analyser.Upload", &Chunk{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &analyserServiceUpload{stream}, nil
}

type Analyser_UploadService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Chunk) error
}

type analyserServiceUpload struct {
	stream client.Stream
}

func (x *analyserServiceUpload) Close() error {
	return x.stream.Close()
}

func (x *analyserServiceUpload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *analyserServiceUpload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *analyserServiceUpload) Send(m *Chunk) error {
	return x.stream.Send(m)
}

// Server API for Analyser service

type AnalyserHandler interface {
	Upload(context.Context, Analyser_UploadStream) error
}

func RegisterAnalyserHandler(s server.Server, hdlr AnalyserHandler, opts ...server.HandlerOption) error {
	type analyser interface {
		Upload(ctx context.Context, stream server.Stream) error
	}
	type Analyser struct {
		analyser
	}
	h := &analyserHandler{hdlr}
	return s.Handle(s.NewHandler(&Analyser{h}, opts...))
}

type analyserHandler struct {
	AnalyserHandler
}

func (h *analyserHandler) Upload(ctx context.Context, stream server.Stream) error {
	return h.AnalyserHandler.Upload(ctx, &analyserUploadStream{stream})
}

type Analyser_UploadStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Chunk, error)
}

type analyserUploadStream struct {
	stream server.Stream
}

func (x *analyserUploadStream) Close() error {
	return x.stream.Close()
}

func (x *analyserUploadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *analyserUploadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *analyserUploadStream) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
