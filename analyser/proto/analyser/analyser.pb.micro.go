// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: analyser.proto

package analyserproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Analyser service

type AnalyserService interface {
	// Create a Task which should be analyzed by sherlock analyser.
	CreateTask(ctx context.Context, in *AnalyserTaskCreateRequest, opts ...client.CallOption) (*AnalyserTaskCreateResponse, error)
	// StatusOfTaskQueue will send the status of the tasks.
	StatusOfTaskQueue(ctx context.Context, in *TaskStatusRequest, opts ...client.CallOption) (*TaskStatusResponse, error)
}

type analyserService struct {
	c    client.Client
	name string
}

func NewAnalyserService(name string, c client.Client) AnalyserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "analyserproto"
	}
	return &analyserService{
		c:    c,
		name: name,
	}
}

func (c *analyserService) CreateTask(ctx context.Context, in *AnalyserTaskCreateRequest, opts ...client.CallOption) (*AnalyserTaskCreateResponse, error) {
	req := c.c.NewRequest(c.name, "Analyser.CreateTask", in)
	out := new(AnalyserTaskCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyserService) StatusOfTaskQueue(ctx context.Context, in *TaskStatusRequest, opts ...client.CallOption) (*TaskStatusResponse, error) {
	req := c.c.NewRequest(c.name, "Analyser.StatusOfTaskQueue", in)
	out := new(TaskStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Analyser service

type AnalyserHandler interface {
	// Create a Task which should be analyzed by sherlock analyser.
	CreateTask(context.Context, *AnalyserTaskCreateRequest, *AnalyserTaskCreateResponse) error
	// StatusOfTaskQueue will send the status of the tasks.
	StatusOfTaskQueue(context.Context, *TaskStatusRequest, *TaskStatusResponse) error
}

func RegisterAnalyserHandler(s server.Server, hdlr AnalyserHandler, opts ...server.HandlerOption) error {
	type analyser interface {
		CreateTask(ctx context.Context, in *AnalyserTaskCreateRequest, out *AnalyserTaskCreateResponse) error
		StatusOfTaskQueue(ctx context.Context, in *TaskStatusRequest, out *TaskStatusResponse) error
	}
	type Analyser struct {
		analyser
	}
	h := &analyserHandler{hdlr}
	return s.Handle(s.NewHandler(&Analyser{h}, opts...))
}

type analyserHandler struct {
	AnalyserHandler
}

func (h *analyserHandler) CreateTask(ctx context.Context, in *AnalyserTaskCreateRequest, out *AnalyserTaskCreateResponse) error {
	return h.AnalyserHandler.CreateTask(ctx, in, out)
}

func (h *analyserHandler) StatusOfTaskQueue(ctx context.Context, in *TaskStatusRequest, out *TaskStatusResponse) error {
	return h.AnalyserHandler.StatusOfTaskQueue(ctx, in, out)
}
