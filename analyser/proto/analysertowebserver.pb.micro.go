// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: analysertowebserver.proto

package analysertowebserver

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Analyser service

type AnalyserService interface {
	//
	//WorkloadRPC can be called to get the workload of the analyser
	WorkloadRPC(ctx context.Context, in *WorkloadRequest, opts ...client.CallOption) (*WorkloadResponse, error)
	//
	//ChangeStateRPC can be called to set the state of the analyser
	ChangeStateRPC(ctx context.Context, in *ChangeStateRequest, opts ...client.CallOption) (*ChangeStateResponse, error)
	//
	//StateRPC can be called to get the state of the analyser
	StateRPC(ctx context.Context, in *StateRequest, opts ...client.CallOption) (*StateResponse, error)
}

type analyserService struct {
	c    client.Client
	name string
}

func NewAnalyserService(name string, c client.Client) AnalyserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "analysertowebserver"
	}
	return &analyserService{
		c:    c,
		name: name,
	}
}

func (c *analyserService) WorkloadRPC(ctx context.Context, in *WorkloadRequest, opts ...client.CallOption) (*WorkloadResponse, error) {
	req := c.c.NewRequest(c.name, "Analyser.WorkloadRPC", in)
	out := new(WorkloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyserService) ChangeStateRPC(ctx context.Context, in *ChangeStateRequest, opts ...client.CallOption) (*ChangeStateResponse, error) {
	req := c.c.NewRequest(c.name, "Analyser.ChangeStateRPC", in)
	out := new(ChangeStateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyserService) StateRPC(ctx context.Context, in *StateRequest, opts ...client.CallOption) (*StateResponse, error) {
	req := c.c.NewRequest(c.name, "Analyser.StateRPC", in)
	out := new(StateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Analyser service

type AnalyserHandler interface {
	//
	//WorkloadRPC can be called to get the workload of the analyser
	WorkloadRPC(context.Context, *WorkloadRequest, *WorkloadResponse) error
	//
	//ChangeStateRPC can be called to set the state of the analyser
	ChangeStateRPC(context.Context, *ChangeStateRequest, *ChangeStateResponse) error
	//
	//StateRPC can be called to get the state of the analyser
	StateRPC(context.Context, *StateRequest, *StateResponse) error
}

func RegisterAnalyserHandler(s server.Server, hdlr AnalyserHandler, opts ...server.HandlerOption) error {
	type analyser interface {
		WorkloadRPC(ctx context.Context, in *WorkloadRequest, out *WorkloadResponse) error
		ChangeStateRPC(ctx context.Context, in *ChangeStateRequest, out *ChangeStateResponse) error
		StateRPC(ctx context.Context, in *StateRequest, out *StateResponse) error
	}
	type Analyser struct {
		analyser
	}
	h := &analyserHandler{hdlr}
	return s.Handle(s.NewHandler(&Analyser{h}, opts...))
}

type analyserHandler struct {
	AnalyserHandler
}

func (h *analyserHandler) WorkloadRPC(ctx context.Context, in *WorkloadRequest, out *WorkloadResponse) error {
	return h.AnalyserHandler.WorkloadRPC(ctx, in, out)
}

func (h *analyserHandler) ChangeStateRPC(ctx context.Context, in *ChangeStateRequest, out *ChangeStateResponse) error {
	return h.AnalyserHandler.ChangeStateRPC(ctx, in, out)
}

func (h *analyserHandler) StateRPC(ctx context.Context, in *StateRequest, out *StateResponse) error {
	return h.AnalyserHandler.StateRPC(ctx, in, out)
}
