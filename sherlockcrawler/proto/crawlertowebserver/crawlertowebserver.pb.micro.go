// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: crawlertowebserver.proto

package crawlerwebserverproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Crawler service

type CrawlerService interface {
	// Receive will take a URLRequest and answer with a statuscode like 200.
	ReceiveURL(ctx context.Context, in *SubmitURLRequest, opts ...client.CallOption) (*SubmitURLResponse, error)
	// StatusOfTaskQueue will send the status of the tasks.
	StatusOfTaskQueue(ctx context.Context, in *TaskStatusRequest, opts ...client.CallOption) (*TaskStatusResponse, error)
	// HasFinished will respond with the status of the entire system.
	HasFinished(ctx context.Context, in *HasFinishedRequest, opts ...client.CallOption) (*HasFinishedResponse, error)
}

type crawlerService struct {
	c    client.Client
	name string
}

func NewCrawlerService(name string, c client.Client) CrawlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "crawlerwebserverproto"
	}
	return &crawlerService{
		c:    c,
		name: name,
	}
}

func (c *crawlerService) ReceiveURL(ctx context.Context, in *SubmitURLRequest, opts ...client.CallOption) (*SubmitURLResponse, error) {
	req := c.c.NewRequest(c.name, "Crawler.ReceiveURL", in)
	out := new(SubmitURLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerService) StatusOfTaskQueue(ctx context.Context, in *TaskStatusRequest, opts ...client.CallOption) (*TaskStatusResponse, error) {
	req := c.c.NewRequest(c.name, "Crawler.StatusOfTaskQueue", in)
	out := new(TaskStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerService) HasFinished(ctx context.Context, in *HasFinishedRequest, opts ...client.CallOption) (*HasFinishedResponse, error) {
	req := c.c.NewRequest(c.name, "Crawler.HasFinished", in)
	out := new(HasFinishedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crawler service

type CrawlerHandler interface {
	// Receive will take a URLRequest and answer with a statuscode like 200.
	ReceiveURL(context.Context, *SubmitURLRequest, *SubmitURLResponse) error
	// StatusOfTaskQueue will send the status of the tasks.
	StatusOfTaskQueue(context.Context, *TaskStatusRequest, *TaskStatusResponse) error
	// HasFinished will respond with the status of the entire system.
	HasFinished(context.Context, *HasFinishedRequest, *HasFinishedResponse) error
}

func RegisterCrawlerHandler(s server.Server, hdlr CrawlerHandler, opts ...server.HandlerOption) error {
	type crawler interface {
		ReceiveURL(ctx context.Context, in *SubmitURLRequest, out *SubmitURLResponse) error
		StatusOfTaskQueue(ctx context.Context, in *TaskStatusRequest, out *TaskStatusResponse) error
		HasFinished(ctx context.Context, in *HasFinishedRequest, out *HasFinishedResponse) error
	}
	type Crawler struct {
		crawler
	}
	h := &crawlerHandler{hdlr}
	return s.Handle(s.NewHandler(&Crawler{h}, opts...))
}

type crawlerHandler struct {
	CrawlerHandler
}

func (h *crawlerHandler) ReceiveURL(ctx context.Context, in *SubmitURLRequest, out *SubmitURLResponse) error {
	return h.CrawlerHandler.ReceiveURL(ctx, in, out)
}

func (h *crawlerHandler) StatusOfTaskQueue(ctx context.Context, in *TaskStatusRequest, out *TaskStatusResponse) error {
	return h.CrawlerHandler.StatusOfTaskQueue(ctx, in, out)
}

func (h *crawlerHandler) HasFinished(ctx context.Context, in *HasFinishedRequest, out *HasFinishedResponse) error {
	return h.CrawlerHandler.HasFinished(ctx, in, out)
}
