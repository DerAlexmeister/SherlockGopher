// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: crawlerToAnalyserFileTransfer.proto

package crawlerproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Sender service

type SenderService interface {
	Upload(ctx context.Context, opts ...client.CallOption) (Sender_UploadService, error)
	UploadInfos(ctx context.Context, in *Infos, opts ...client.CallOption) (Sender_UploadInfosService, error)
	UploadErrorCase(ctx context.Context, in *ErrorCase, opts ...client.CallOption) (Sender_UploadErrorCaseService, error)
}

type senderService struct {
	c    client.Client
	name string
}

func NewSenderService(name string, c client.Client) SenderService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "crawlerproto"
	}
	return &senderService{
		c:    c,
		name: name,
	}
}

func (c *senderService) Upload(ctx context.Context, opts ...client.CallOption) (Sender_UploadService, error) {
	req := c.c.NewRequest(c.name, "Sender.Upload", &Chunk{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &senderServiceUpload{stream}, nil
}

type Sender_UploadService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Chunk) error
	Recv() (*UploadStatus, error)
}

type senderServiceUpload struct {
	stream client.Stream
}

func (x *senderServiceUpload) Close() error {
	return x.stream.Close()
}

func (x *senderServiceUpload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *senderServiceUpload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *senderServiceUpload) Send(m *Chunk) error {
	return x.stream.Send(m)
}

func (x *senderServiceUpload) Recv() (*UploadStatus, error) {
	m := new(UploadStatus)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *senderService) UploadInfos(ctx context.Context, in *Infos, opts ...client.CallOption) (Sender_UploadInfosService, error) {
	req := c.c.NewRequest(c.name, "Sender.UploadInfos", &Infos{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &senderServiceUploadInfos{stream}, nil
}

type Sender_UploadInfosService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*UploadStatus, error)
}

type senderServiceUploadInfos struct {
	stream client.Stream
}

func (x *senderServiceUploadInfos) Close() error {
	return x.stream.Close()
}

func (x *senderServiceUploadInfos) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *senderServiceUploadInfos) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *senderServiceUploadInfos) Recv() (*UploadStatus, error) {
	m := new(UploadStatus)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *senderService) UploadErrorCase(ctx context.Context, in *ErrorCase, opts ...client.CallOption) (Sender_UploadErrorCaseService, error) {
	req := c.c.NewRequest(c.name, "Sender.UploadErrorCase", &ErrorCase{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &senderServiceUploadErrorCase{stream}, nil
}

type Sender_UploadErrorCaseService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*UploadStatus, error)
}

type senderServiceUploadErrorCase struct {
	stream client.Stream
}

func (x *senderServiceUploadErrorCase) Close() error {
	return x.stream.Close()
}

func (x *senderServiceUploadErrorCase) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *senderServiceUploadErrorCase) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *senderServiceUploadErrorCase) Recv() (*UploadStatus, error) {
	m := new(UploadStatus)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Sender service

type SenderHandler interface {
	Upload(context.Context, Sender_UploadStream) error
	UploadInfos(context.Context, *Infos, Sender_UploadInfosStream) error
	UploadErrorCase(context.Context, *ErrorCase, Sender_UploadErrorCaseStream) error
}

func RegisterSenderHandler(s server.Server, hdlr SenderHandler, opts ...server.HandlerOption) error {
	type sender interface {
		Upload(ctx context.Context, stream server.Stream) error
		UploadInfos(ctx context.Context, stream server.Stream) error
		UploadErrorCase(ctx context.Context, stream server.Stream) error
	}
	type Sender struct {
		sender
	}
	h := &senderHandler{hdlr}
	return s.Handle(s.NewHandler(&Sender{h}, opts...))
}

type senderHandler struct {
	SenderHandler
}

func (h *senderHandler) Upload(ctx context.Context, stream server.Stream) error {
	return h.SenderHandler.Upload(ctx, &senderUploadStream{stream})
}

type Sender_UploadStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UploadStatus) error
	Recv() (*Chunk, error)
}

type senderUploadStream struct {
	stream server.Stream
}

func (x *senderUploadStream) Close() error {
	return x.stream.Close()
}

func (x *senderUploadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *senderUploadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *senderUploadStream) Send(m *UploadStatus) error {
	return x.stream.Send(m)
}

func (x *senderUploadStream) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *senderHandler) UploadInfos(ctx context.Context, stream server.Stream) error {
	m := new(Infos)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.SenderHandler.UploadInfos(ctx, m, &senderUploadInfosStream{stream})
}

type Sender_UploadInfosStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UploadStatus) error
}

type senderUploadInfosStream struct {
	stream server.Stream
}

func (x *senderUploadInfosStream) Close() error {
	return x.stream.Close()
}

func (x *senderUploadInfosStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *senderUploadInfosStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *senderUploadInfosStream) Send(m *UploadStatus) error {
	return x.stream.Send(m)
}

func (h *senderHandler) UploadErrorCase(ctx context.Context, stream server.Stream) error {
	m := new(ErrorCase)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.SenderHandler.UploadErrorCase(ctx, m, &senderUploadErrorCaseStream{stream})
}

type Sender_UploadErrorCaseStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UploadStatus) error
}

type senderUploadErrorCaseStream struct {
	stream server.Stream
}

func (x *senderUploadErrorCaseStream) Close() error {
	return x.stream.Close()
}

func (x *senderUploadErrorCaseStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *senderUploadErrorCaseStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *senderUploadErrorCaseStream) Send(m *UploadStatus) error {
	return x.stream.Send(m)
}
